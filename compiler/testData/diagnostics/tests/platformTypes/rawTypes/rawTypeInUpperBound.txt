package

public /*synthesized*/ fun </*0*/ T : kotlin.Any!> A(/*0*/ function: () -> kotlin.(Mutable)List<kotlin.String!>!): A<T>
internal fun foo(/*0*/ x: B<*>): kotlin.Unit

public interface A</*0*/ T : kotlin.Any!> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract fun getChildrenStubs(): kotlin.(Mutable)List<kotlin.String!>!
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class B</*0*/ E : A<out kotlin.Any?>!> {
    public constructor B</*0*/ E : A<out kotlin.Any?>!>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open fun foo(): E!
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
