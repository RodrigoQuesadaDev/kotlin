package test

test.JustEnum(weapon = Weapon.SCISSORS) test.EnumArray(enumArray = {}) internal final class C1 {
    public constructor C1()
}

test.EnumArray(enumArray = {Weapon.PAPER, Weapon.ROCK}) internal final class C2 {
    public constructor C2()
}

kotlin.annotation.annotation() internal final class EnumArray : kotlin.Annotation {
    public constructor EnumArray(/*0*/ enumArray: kotlin.Array<test.Weapon>)
    internal final val enumArray: kotlin.Array<test.Weapon>
}

kotlin.annotation.annotation() internal final class JustEnum : kotlin.Annotation {
    public constructor JustEnum(/*0*/ weapon: test.Weapon)
    internal final val weapon: test.Weapon
}

internal final enum class Weapon : kotlin.Enum<test.Weapon> {
    enum entry ROCK

    enum entry PAPER

    enum entry SCISSORS

    private constructor Weapon()
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.Weapon): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.Weapon
    public final /*synthesized*/ fun values(): kotlin.Array<test.Weapon>
}
