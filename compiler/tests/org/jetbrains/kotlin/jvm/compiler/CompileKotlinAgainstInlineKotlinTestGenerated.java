/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.jvm.compiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/boxInline")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class CompileKotlinAgainstInlineKotlinTestGenerated extends AbstractCompileKotlinAgainstInlineKotlinTest {
    public void testAllFilesPresentInBoxInline() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline"), Pattern.compile("^(.+)_1\\.kt$"), true);
    }

    @TestMetadata("compiler/testData/codegen/boxInline/anonymousObject")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AnonymousObject extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInAnonymousObject() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/anonymousObject"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("anonymousObjectOnCallSite_1.kt")
        public void testAnonymousObjectOnCallSite() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/anonymousObject/anonymousObjectOnCallSite_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("anonymousObjectOnCallSiteSuperParams_1.kt")
        public void testAnonymousObjectOnCallSiteSuperParams() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/anonymousObject/anonymousObjectOnCallSiteSuperParams_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("anonymousObjectOnDeclarationSite_1.kt")
        public void testAnonymousObjectOnDeclarationSite() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/anonymousObject/anonymousObjectOnDeclarationSite_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("anonymousObjectOnDeclarationSiteSuperParams_1.kt")
        public void testAnonymousObjectOnDeclarationSiteSuperParams() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/anonymousObject/anonymousObjectOnDeclarationSiteSuperParams_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("capturedLambdaInInline_1.kt")
        public void testCapturedLambdaInInline() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/anonymousObject/capturedLambdaInInline_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("capturedLambdaInInline2_1.kt")
        public void testCapturedLambdaInInline2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/anonymousObject/capturedLambdaInInline2_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("capturedLambdaInInline3_1.kt")
        public void testCapturedLambdaInInline3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/anonymousObject/capturedLambdaInInline3_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("capturedLambdaInInlineObject_1.kt")
        public void testCapturedLambdaInInlineObject() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/anonymousObject/capturedLambdaInInlineObject_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("changingReturnType_1.kt")
        public void testChangingReturnType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/anonymousObject/changingReturnType_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/builders")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Builders extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInBuilders() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/builders"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("builders_1.kt")
        public void testBuilders() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/builders/builders_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("buildersAndLambdaCapturing_1.kt")
        public void testBuildersAndLambdaCapturing() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/builders/buildersAndLambdaCapturing_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/callableReference")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CallableReference extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInCallableReference() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/callableReference"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("classLevel_1.kt")
        public void testClassLevel() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/callableReference/classLevel_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("classLevel2_1.kt")
        public void testClassLevel2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/callableReference/classLevel2_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("constructor_1.kt")
        public void testConstructor() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/callableReference/constructor_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("intrinsic_1.kt")
        public void testIntrinsic() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/callableReference/intrinsic_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("topLevel_1.kt")
        public void testTopLevel() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/callableReference/topLevel_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("topLevelExtension_1.kt")
        public void testTopLevelExtension() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/callableReference/topLevelExtension_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/capture")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Capture extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInCapture() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/capture"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("captureInlinable_1.kt")
        public void testCaptureInlinable() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/capture/captureInlinable_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("captureInlinableAndOther_1.kt")
        public void testCaptureInlinableAndOther() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/capture/captureInlinableAndOther_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("captureThisAndReceiver_1.kt")
        public void testCaptureThisAndReceiver() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/capture/captureThisAndReceiver_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("generics_1.kt")
        public void testGenerics() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/capture/generics_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("simpleCapturingInClass_1.kt")
        public void testSimpleCapturingInClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/capture/simpleCapturingInClass_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("simpleCapturingInPackage_1.kt")
        public void testSimpleCapturingInPackage() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/capture/simpleCapturingInPackage_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/complex")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Complex extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInComplex() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/complex"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("closureChain_1.kt")
        public void testClosureChain() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/complex/closureChain_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("forEachLine_1.kt")
        public void testForEachLine() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/complex/forEachLine_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("lambdaInLambda_1.kt")
        public void testLambdaInLambda() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/complex/lambdaInLambda_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("use_1.kt")
        public void testUse() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/complex/use_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("with_1.kt")
        public void testWith() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/complex/with_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/defaultValues")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DefaultValues extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInDefaultValues() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/defaultValues"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("defaultInExtension_1.kt")
        public void testDefaultInExtension() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/defaultValues/defaultInExtension_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("defaultMethod_1.kt")
        public void testDefaultMethod() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/defaultValues/defaultMethod_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("defaultMethodInClass_1.kt")
        public void testDefaultMethodInClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/defaultValues/defaultMethodInClass_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("defaultParamRemapping_1.kt")
        public void testDefaultParamRemapping() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/defaultValues/defaultParamRemapping_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("inlineInDefaultParameter_1.kt")
        public void testInlineInDefaultParameter() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/defaultValues/inlineInDefaultParameter_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("kt5685_1.kt")
        public void testKt5685() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/defaultValues/kt5685_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("simpleDefaultMethod_1.kt")
        public void testSimpleDefaultMethod() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/defaultValues/simpleDefaultMethod_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/functionExpression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FunctionExpression extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInFunctionExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/functionExpression"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("extension_1.kt")
        public void testExtension() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/functionExpression/extension_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/lambdaClassClash")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LambdaClassClash extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInLambdaClassClash() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/lambdaClassClash"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("lambdaClassClash_1.kt")
        public void testLambdaClassClash() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/lambdaClassClash/lambdaClassClash_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("noInlineLambdaX2_1.kt")
        public void testNoInlineLambdaX2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/lambdaClassClash/noInlineLambdaX2_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/lambdaTransformation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LambdaTransformation extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInLambdaTransformation() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/lambdaTransformation"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("lambdaCloning_1.kt")
        public void testLambdaCloning() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/lambdaTransformation/lambdaCloning_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("lambdaInLambda2_1.kt")
        public void testLambdaInLambda2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/lambdaTransformation/lambdaInLambda2_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("lambdaInLambdaNoInline_1.kt")
        public void testLambdaInLambdaNoInline() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/lambdaTransformation/lambdaInLambdaNoInline_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("regeneratedLambdaName_1.kt")
        public void testRegeneratedLambdaName() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/lambdaTransformation/regeneratedLambdaName_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("sameCaptured_1.kt")
        public void testSameCaptured() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/lambdaTransformation/sameCaptured_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/localFunInLambda")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LocalFunInLambda extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInLocalFunInLambda() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/localFunInLambda"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("localFunInLambda_1.kt")
        public void testLocalFunInLambda() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/localFunInLambda/localFunInLambda_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/modifiers")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Modifiers extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInModifiers() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/modifiers"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("packagePrivateMembers_1.kt")
        public void testPackagePrivateMembers() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/modifiers/packagePrivateMembers_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("propertyModifiers_1.kt")
        public void testPropertyModifiers() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/modifiers/propertyModifiers_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/noInline")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NoInline extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInNoInline() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/noInline"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("lambdaAsGeneric_1.kt")
        public void testLambdaAsGeneric() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/noInline/lambdaAsGeneric_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("lambdaAsNonFunction_1.kt")
        public void testLambdaAsNonFunction() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/noInline/lambdaAsNonFunction_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("noInline_1.kt")
        public void testNoInline() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/noInline/noInline_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("noInlineLambdaChain_1.kt")
        public void testNoInlineLambdaChain() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/noInline/noInlineLambdaChain_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("noInlineLambdaChainWithCapturedInline_1.kt")
        public void testNoInlineLambdaChainWithCapturedInline() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/noInline/noInlineLambdaChainWithCapturedInline_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("withoutInline_1.kt")
        public void testWithoutInline() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/noInline/withoutInline_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NonLocalReturns extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInNonLocalReturns() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("explicitLocalReturn_1.kt")
        public void testExplicitLocalReturn() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/explicitLocalReturn_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("justReturnInLambda_1.kt")
        public void testJustReturnInLambda() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/justReturnInLambda_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("kt5199_1.kt")
        public void testKt5199() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/kt5199_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("nestedNonLocals_1.kt")
        public void testNestedNonLocals() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/nestedNonLocals_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("noInlineLocalReturn_1.kt")
        public void testNoInlineLocalReturn() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/noInlineLocalReturn_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("nonLocalReturnFromOuterLambda_1.kt")
        public void testNonLocalReturnFromOuterLambda() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/nonLocalReturnFromOuterLambda_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("propertyAccessors_1.kt")
        public void testPropertyAccessors() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/propertyAccessors_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("returnFromFunctionExpr_1.kt")
        public void testReturnFromFunctionExpr() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/returnFromFunctionExpr_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("simple_1.kt")
        public void testSimple() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/simple_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("simpleFunctional_1.kt")
        public void testSimpleFunctional() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/simpleFunctional_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("simpleVoid_1.kt")
        public void testSimpleVoid() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/simpleVoid_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Deparenthesize extends AbstractCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInDeparenthesize() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize"), Pattern.compile("^(.+)_1\\.kt$"), true);
            }

            @TestMetadata("bracket_1.kt")
            public void testBracket() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize/bracket_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }

            @TestMetadata("labeled_1.kt")
            public void testLabeled() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize/labeled_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TryFinally extends AbstractCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInTryFinally() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally"), Pattern.compile("^(.+)_1\\.kt$"), true);
            }

            @TestMetadata("kt6956_1.kt")
            public void testKt6956() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt6956_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }

            @TestMetadata("kt7273_1.kt")
            public void testKt7273() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt7273_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }

            @TestMetadata("nonLocalReturnFromOuterLambda_1.kt")
            public void testNonLocalReturnFromOuterLambda() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/nonLocalReturnFromOuterLambda_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }

            @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CallSite extends AbstractCompileKotlinAgainstInlineKotlinTest {
                public void testAllFilesPresentInCallSite() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite"), Pattern.compile("^(.+)_1\\.kt$"), true);
                }

                @TestMetadata("callSite_1.kt")
                public void testCallSite() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/callSite_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("callSiteComplex_1.kt")
                public void testCallSiteComplex() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/callSiteComplex_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("exceptionTableSplit_1.kt")
                public void testExceptionTableSplit() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/exceptionTableSplit_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("exceptionTableSplitNoReturn_1.kt")
                public void testExceptionTableSplitNoReturn() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/exceptionTableSplitNoReturn_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("finallyInFinally_1.kt")
                public void testFinallyInFinally() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/finallyInFinally_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }
            }

            @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Chained extends AbstractCompileKotlinAgainstInlineKotlinTest {
                public void testAllFilesPresentInChained() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained"), Pattern.compile("^(.+)_1\\.kt$"), true);
                }

                @TestMetadata("finallyInFinally_1.kt")
                public void testFinallyInFinally() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/finallyInFinally_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("finallyInFinally2_1.kt")
                public void testFinallyInFinally2() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/finallyInFinally2_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("intReturn_1.kt")
                public void testIntReturn() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturn_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("intReturnComplex_1.kt")
                public void testIntReturnComplex() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("intReturnComplex2_1.kt")
                public void testIntReturnComplex2() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex2_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("intReturnComplex3_1.kt")
                public void testIntReturnComplex3() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex3_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("intReturnComplex4_1.kt")
                public void testIntReturnComplex4() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex4_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("nestedLambda_1.kt")
                public void testNestedLambda() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/nestedLambda_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }
            }

            @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DeclSite extends AbstractCompileKotlinAgainstInlineKotlinTest {
                public void testAllFilesPresentInDeclSite() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite"), Pattern.compile("^(.+)_1\\.kt$"), true);
                }

                @TestMetadata("complex_1.kt")
                public void testComplex() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/complex_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("intReturn_1.kt")
                public void testIntReturn() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/intReturn_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("intReturnComplex_1.kt")
                public void testIntReturnComplex() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/intReturnComplex_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("longReturn_1.kt")
                public void testLongReturn() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/longReturn_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("nested_1.kt")
                public void testNested() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/nested_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("returnInFinally_1.kt")
                public void testReturnInFinally() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/returnInFinally_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("returnInTry_1.kt")
                public void testReturnInTry() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/returnInTry_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("returnInTryAndFinally_1.kt")
                public void testReturnInTryAndFinally() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/returnInTryAndFinally_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("severalInTry_1.kt")
                public void testSeveralInTry() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/severalInTry_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("severalInTryComplex_1.kt")
                public void testSeveralInTryComplex() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/severalInTryComplex_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("voidInlineFun_1.kt")
                public void testVoidInlineFun() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/voidInlineFun_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("voidNonLocal_1.kt")
                public void testVoidNonLocal() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/voidNonLocal_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }
            }

            @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ExceptionTable extends AbstractCompileKotlinAgainstInlineKotlinTest {
                public void testAllFilesPresentInExceptionTable() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable"), Pattern.compile("^(.+)_1\\.kt$"), true);
                }

                @TestMetadata("break_1.kt")
                public void testBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/break_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("continue_1.kt")
                public void testContinue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/continue_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("exceptionInFinally_1.kt")
                public void testExceptionInFinally() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/exceptionInFinally_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("forInFinally_1.kt")
                public void testForInFinally() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/forInFinally_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("innerAndExternal_1.kt")
                public void testInnerAndExternal() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/innerAndExternal_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("innerAndExternalNested_1.kt")
                public void testInnerAndExternalNested() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/innerAndExternalNested_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("innerAndExternalSimple_1.kt")
                public void testInnerAndExternalSimple() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/innerAndExternalSimple_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("nested_1.kt")
                public void testNested() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/nested_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("nestedWithReturns_1.kt")
                public void testNestedWithReturns() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/nestedWithReturns_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("nestedWithReturnsSimple_1.kt")
                public void testNestedWithReturnsSimple() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/nestedWithReturnsSimple_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("noFinally_1.kt")
                public void testNoFinally() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/noFinally_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("severalCatchClause_1.kt")
                public void testSeveralCatchClause() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/severalCatchClause_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("simpleThrow_1.kt")
                public void testSimpleThrow() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/simpleThrow_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("synchonized_1.kt")
                public void testSynchonized() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/synchonized_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("throwInFinally_1.kt")
                public void testThrowInFinally() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/throwInFinally_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }

                @TestMetadata("tryCatchInFinally_1.kt")
                public void testTryCatchInFinally() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/tryCatchInFinally_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }
            }

            @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/variables")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Variables extends AbstractCompileKotlinAgainstInlineKotlinTest {
                public void testAllFilesPresentInVariables() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/variables"), Pattern.compile("^(.+)_1\\.kt$"), true);
                }

                @TestMetadata("kt7792_1.kt")
                public void testKt7792() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/variables/kt7792_1.kt");
                    doBoxTestWithInlineCheck(fileName);
                }
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/reified")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Reified extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInReified() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/reified"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("capturedLambda_1.kt")
        public void testCapturedLambda() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/reified/capturedLambda_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("capturedLambda2_1.kt")
        public void testCapturedLambda2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/reified/capturedLambda2_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("packages_1.kt")
        public void testPackages() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/reified/packages_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/simple")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Simple extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInSimple() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/simple"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("classObject_1.kt")
        public void testClassObject() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/classObject_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("extension_1.kt")
        public void testExtension() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/extension_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("extensionLambda_1.kt")
        public void testExtensionLambda() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/extensionLambda_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("params_1.kt")
        public void testParams() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/params_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("rootConstructor_1.kt")
        public void testRootConstructor() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/rootConstructor_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("severalClosures_1.kt")
        public void testSeveralClosures() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/severalClosures_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("severalUsage_1.kt")
        public void testSeveralUsage() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/severalUsage_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("simpleDouble_1.kt")
        public void testSimpleDouble() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/simpleDouble_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("simpleEnum_1.kt")
        public void testSimpleEnum() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/simpleEnum_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("simpleGenerics_1.kt")
        public void testSimpleGenerics() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/simpleGenerics_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("simpleInt_1.kt")
        public void testSimpleInt() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/simpleInt_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("simpleLambda_1.kt")
        public void testSimpleLambda() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/simpleLambda_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("simpleObject_1.kt")
        public void testSimpleObject() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/simpleObject_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("vararg_1.kt")
        public void testVararg() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/simple/vararg_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/smap")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Smap extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInSmap() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/smap"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("assertion_1.kt")
        public void testAssertion() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/smap/assertion_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("oneFile_1.kt")
        public void testOneFile() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/smap/oneFile_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("smap_1.kt")
        public void testSmap() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/smap/smap_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("compiler/testData/codegen/boxInline/smap/anonymous")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Anonymous extends AbstractCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInAnonymous() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/smap/anonymous"), Pattern.compile("^(.+)_1\\.kt$"), true);
            }

            @TestMetadata("lambda_1.kt")
            public void testLambda() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/smap/anonymous/lambda_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }

            @TestMetadata("lambdaOnCallSite_1.kt")
            public void testLambdaOnCallSite() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/smap/anonymous/lambdaOnCallSite_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }

            @TestMetadata("lambdaOnInlineCallSite_1.kt")
            public void testLambdaOnInlineCallSite() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/smap/anonymous/lambdaOnInlineCallSite_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }

            @TestMetadata("object_1.kt")
            public void testObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/smap/anonymous/object_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }

            @TestMetadata("objectOnCallSite_1.kt")
            public void testObjectOnCallSite() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/smap/anonymous/objectOnCallSite_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }

            @TestMetadata("objectOnInlineCallSite_1.kt")
            public void testObjectOnInlineCallSite() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/smap/anonymous/objectOnInlineCallSite_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }

            @TestMetadata("objectOnInlineCallSite2_1.kt")
            public void testObjectOnInlineCallSite2() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/smap/anonymous/objectOnInlineCallSite2_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }

            @TestMetadata("objectOnInlineCallSiteWithCapture_1.kt")
            public void testObjectOnInlineCallSiteWithCapture() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/smap/anonymous/objectOnInlineCallSiteWithCapture_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/smap/resolve")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Resolve extends AbstractCompileKotlinAgainstInlineKotlinTest {
            public void testAllFilesPresentInResolve() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/smap/resolve"), Pattern.compile("^(.+)_1\\.kt$"), true);
            }

            @TestMetadata("inlineComponent_1.kt")
            public void testInlineComponent() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/smap/resolve/inlineComponent_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }

            @TestMetadata("inlineIterator_1.kt")
            public void testInlineIterator() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/smap/resolve/inlineIterator_1.kt");
                doBoxTestWithInlineCheck(fileName);
            }
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/special")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Special extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInSpecial() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/special"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("identityCheck_1.kt")
        public void testIdentityCheck() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/special/identityCheck_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("ifBranches_1.kt")
        public void testIfBranches() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/special/ifBranches_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("iinc_1.kt")
        public void testIinc() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/special/iinc_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("inlineChain_1.kt")
        public void testInlineChain() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/special/inlineChain_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("plusAssign_1.kt")
        public void testPlusAssign() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/special/plusAssign_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("stackHeightBug_1.kt")
        public void testStackHeightBug() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/special/stackHeightBug_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/trait")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Trait extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInTrait() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/trait"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("trait_1.kt")
        public void testTrait() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/trait/trait_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/tryCatchFinally")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TryCatchFinally extends AbstractCompileKotlinAgainstInlineKotlinTest {
        public void testAllFilesPresentInTryCatchFinally() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/tryCatchFinally"), Pattern.compile("^(.+)_1\\.kt$"), true);
        }

        @TestMetadata("kt5863_1.kt")
        public void testKt5863() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/tryCatchFinally/kt5863_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("tryCatch_1.kt")
        public void testTryCatch() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/tryCatchFinally/tryCatch_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("tryCatch2_1.kt")
        public void testTryCatch2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/tryCatchFinally/tryCatch2_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }

        @TestMetadata("tryCatchFinally_1.kt")
        public void testTryCatchFinally() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/tryCatchFinally/tryCatchFinally_1.kt");
            doBoxTestWithInlineCheck(fileName);
        }
    }
}
