/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.jvm.compiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/compileKotlinAgainstKotlin")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class CompileKotlinAgainstKotlinTestGenerated extends AbstractCompileKotlinAgainstKotlinTest {
    public void testAllFilesPresentInCompileKotlinAgainstKotlin() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileKotlinAgainstKotlin"), Pattern.compile("^(.+)_A\\.kt$"), true);
    }

    @TestMetadata("AnnotationInTrait_A.kt")
    public void testAnnotationInTrait() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/AnnotationInTrait_A.kt");
        doTest(fileName);
    }

    @TestMetadata("ClassInObject_A.kt")
    public void testClassInObject() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/ClassInObject_A.kt");
        doTest(fileName);
    }

    @TestMetadata("ClassObjectInEnum_A.kt")
    public void testClassObjectInEnum() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/ClassObjectInEnum_A.kt");
        doTest(fileName);
    }

    @TestMetadata("ClassObjectMember_A.kt")
    public void testClassObjectMember() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/ClassObjectMember_A.kt");
        doTest(fileName);
    }

    @TestMetadata("ConstructorVararg_A.kt")
    public void testConstructorVararg() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/ConstructorVararg_A.kt");
        doTest(fileName);
    }

    @TestMetadata("DefaultConstructor_A.kt")
    public void testDefaultConstructor() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/DefaultConstructor_A.kt");
        doTest(fileName);
    }

    @TestMetadata("DoublyNestedClass_A.kt")
    public void testDoublyNestedClass() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/DoublyNestedClass_A.kt");
        doTest(fileName);
    }

    @TestMetadata("Enum_A.kt")
    public void testEnum() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/Enum_A.kt");
        doTest(fileName);
    }

    @TestMetadata("ImportObject_A.kt")
    public void testImportObject() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/ImportObject_A.kt");
        doTest(fileName);
    }

    @TestMetadata("InlinedConstants_A.kt")
    public void testInlinedConstants() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/InlinedConstants_A.kt");
        doTest(fileName);
    }

    @TestMetadata("InnerClassConstructor_A.kt")
    public void testInnerClassConstructor() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/InnerClassConstructor_A.kt");
        doTest(fileName);
    }

    @TestMetadata("KotlinPropertyAsAnnotationParameter_A.kt")
    public void testKotlinPropertyAsAnnotationParameter() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/KotlinPropertyAsAnnotationParameter_A.kt");
        doTest(fileName);
    }

    @TestMetadata("NestedClass_A.kt")
    public void testNestedClass() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/NestedClass_A.kt");
        doTest(fileName);
    }

    @TestMetadata("NestedEnum_A.kt")
    public void testNestedEnum() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/NestedEnum_A.kt");
        doTest(fileName);
    }

    @TestMetadata("NestedObject_A.kt")
    public void testNestedObject() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/NestedObject_A.kt");
        doTest(fileName);
    }

    @TestMetadata("PlatformNames_A.kt")
    public void testPlatformNames() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/PlatformNames_A.kt");
        doTest(fileName);
    }

    @TestMetadata("PlatformTypes_A.kt")
    public void testPlatformTypes() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/PlatformTypes_A.kt");
        doTest(fileName);
    }

    @TestMetadata("PropertyReference_A.kt")
    public void testPropertyReference() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/PropertyReference_A.kt");
        doTest(fileName);
    }

    @TestMetadata("RecursiveGeneric_A.kt")
    public void testRecursiveGeneric() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/RecursiveGeneric_A.kt");
        doTest(fileName);
    }

    @TestMetadata("SecondaryConstructors_A.kt")
    public void testSecondaryConstructors() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/SecondaryConstructors_A.kt");
        doTest(fileName);
    }

    @TestMetadata("Simple_A.kt")
    public void testSimple() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/Simple_A.kt");
        doTest(fileName);
    }

    @TestMetadata("StarImportEnum_A.kt")
    public void testStarImportEnum() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstKotlin/StarImportEnum_A.kt");
        doTest(fileName);
    }
}
