/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.idea.quickfix;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/quickfix")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class QuickFixMultiFileTestGenerated extends AbstractQuickFixMultiFileTest {
    public void testAllFilesPresentInQuickfix() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
    }

    @TestMetadata("idea/testData/quickfix/addStarProjections")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AddStarProjections extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInAddStarProjections() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/addStarProjections"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
        }

    }

    @TestMetadata("idea/testData/quickfix/autoImports")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AutoImports extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInAutoImports() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/autoImports"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
        }

        @TestMetadata("ambiguousClassName_before_Main.kt")
        public void testAmbiguousClassName() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/ambiguousClassName_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("classImport_before_Main.kt")
        public void testClassImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/classImport_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("divOperator_before_Main.kt")
        public void testDivOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/divOperator_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("extensionFunctionImport_before_Main.kt")
        public void testExtensionFunctionImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/extensionFunctionImport_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("extensionFunctionImportImplicitReceiver_before_Main.kt")
        public void testExtensionFunctionImportImplicitReceiver() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/extensionFunctionImportImplicitReceiver_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("extensionPropertyImport_before_Main.kt")
        public void testExtensionPropertyImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/extensionPropertyImport_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("factoryFunctionFromLambda_before_Main.kt")
        public void testFactoryFunctionFromLambda() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/factoryFunctionFromLambda_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("falsePostfixOperator_before_Main.kt")
        public void testFalsePostfixOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/falsePostfixOperator_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("functionImport_before_Main.kt")
        public void testFunctionImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/functionImport_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("importInFirstPartInQualifiedExpression_before_Main.kt")
        public void testImportInFirstPartInQualifiedExpression() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/importInFirstPartInQualifiedExpression_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("importInFirstPartInUserType_before_Main.kt")
        public void testImportInFirstPartInUserType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/importInFirstPartInUserType_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("importTrait_before_Main.kt")
        public void testImportTrait() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/importTrait_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("infixCall_before_Main.kt")
        public void testInfixCall() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/infixCall_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("minusOperator_before_Main.kt")
        public void testMinusOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/minusOperator_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("nestedClass_before_Main.kt")
        public void testNestedClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/nestedClass_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportForFunInQualifiedNotFirst_before_Main.kt")
        public void testNoImportForFunInQualifiedNotFirst() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportForFunInQualifiedNotFirst_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportForNestedInPrivate_before_Main.kt")
        public void testNoImportForNestedInPrivate() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportForNestedInPrivate_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportForPrivateClass_before_Main.kt")
        public void testNoImportForPrivateClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportForPrivateClass_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportInImports_before_Main.kt")
        public void testNoImportInImports() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportInImports_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportInQualifiedExpressionNotFirst_before_Main.kt")
        public void testNoImportInQualifiedExpressionNotFirst() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportInQualifiedExpressionNotFirst_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportInQualifiedUserTypeNotFirst_before_Main.kt")
        public void testNoImportInQualifiedUserTypeNotFirst() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportInQualifiedUserTypeNotFirst_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportInSafeQualifiedExpressionNotFirst_before_Main.kt")
        public void testNoImportInSafeQualifiedExpressionNotFirst() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportInSafeQualifiedExpressionNotFirst_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("objectImport_before_Main.kt")
        public void testObjectImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/objectImport_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("packageClass_before_Main.kt")
        public void testPackageClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/packageClass_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("plusOperator_before_Main.kt")
        public void testPlusOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/plusOperator_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("postfixOperator_before_Main.kt")
        public void testPostfixOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/postfixOperator_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("propertyImport_before_Main.kt")
        public void testPropertyImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/propertyImport_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("sameModuleImportPriority_before_Main.kt")
        public void testSameModuleImportPriority() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/sameModuleImportPriority_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("timesAssign_before_Main.kt")
        public void testTimesAssign() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/timesAssign_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("unaryMinusOperator_before_Main.kt")
        public void testUnaryMinusOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/unaryMinusOperator_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("unaryPlusOperator_before_Main.kt")
        public void testUnaryPlusOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/unaryPlusOperator_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("withSmartCastQualifier_before_Main.kt")
        public void testWithSmartCastQualifier() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/withSmartCastQualifier_before_Main.kt");
            doTestWithExtraFile(fileName);
        }
    }

    @TestMetadata("idea/testData/quickfix/changeSignature")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ChangeSignature extends AbstractQuickFixMultiFileTest {
        @TestMetadata("addParameterWithImport_before_Main.kt")
        public void testAddParameterWithImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/changeSignature/addParameterWithImport_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        public void testAllFilesPresentInChangeSignature() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/changeSignature"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
        }

        @TestMetadata("matchFunctionLiteralWithSAMType_before_Main.kt")
        public void testMatchFunctionLiteralWithSAMType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/changeSignature/matchFunctionLiteralWithSAMType_before_Main.kt");
            doTestWithExtraFile(fileName);
        }
    }

    @TestMetadata("idea/testData/quickfix/createFromUsage")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CreateFromUsage extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInCreateFromUsage() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createClass")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateClass extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateClass() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/annotationEntry")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class AnnotationEntry extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInAnnotationEntry() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/annotationEntry"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
                }

                @TestMetadata("nestedGroovyAnnotation_before_Main.kt")
                public void testNestedGroovyAnnotation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/annotationEntry/nestedGroovyAnnotation_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("nestedJavaAnnotation_before_Main.kt")
                public void testNestedJavaAnnotation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/annotationEntry/nestedJavaAnnotation_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("nestedJavaAnnotationWithNamedArgs_before_Main.kt")
                public void testNestedJavaAnnotationWithNamedArgs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/annotationEntry/nestedJavaAnnotationWithNamedArgs_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CallExpression extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInCallExpression() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/callExpression"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
                }

                @TestMetadata("callInAnnotationEntryWithJavaQualifier_before_Main.kt")
                public void testCallInAnnotationEntryWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callInAnnotationEntryWithJavaQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithExplicitParamNamesAndJavaQualifier_before_Main.kt")
                public void testCallWithExplicitParamNamesAndJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithExplicitParamNamesAndJavaQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithFinalJavaSupertype_before_Main.kt")
                public void testCallWithFinalJavaSupertype() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithFinalJavaSupertype_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithGenericJavaReceiver_before_Main.kt")
                public void testCallWithGenericJavaReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithGenericJavaReceiver_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithGroovyClassQualifier_before_Main.kt")
                public void testCallWithGroovyClassQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithGroovyClassQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithJavaClassQualifier_before_Main.kt")
                public void testCallWithJavaClassQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithJavaClassQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithJavaClassReceiver_before_Main.kt")
                public void testCallWithJavaClassReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithJavaClassReceiver_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithJavaQualifierInMemberValDelegate_before_Main.kt")
                public void testCallWithJavaQualifierInMemberValDelegate() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithJavaQualifierInMemberValDelegate_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithSuperclassAndJavaReceiverNoConstructorParams_before_Main.kt")
                public void testCallWithSuperclassAndJavaReceiverNoConstructorParams() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithSuperclassAndJavaReceiverNoConstructorParams_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithSuperclassConstructorParamsAndJavaReceiver_before_Main.kt")
                public void testCallWithSuperclassConstructorParamsAndJavaReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithSuperclassConstructorParamsAndJavaReceiver_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithSupertraitAndJavaReceiver_before_Main.kt")
                public void testCallWithSupertraitAndJavaReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithSupertraitAndJavaReceiver_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class TypeArguments extends AbstractQuickFixMultiFileTest {
                    public void testAllFilesPresentInTypeArguments() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
                    }

                    @TestMetadata("javaClassMember_before_Main.kt")
                    public void testJavaClassMember() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMember_before_Main.kt");
                        doTestWithExtraFile(fileName);
                    }

                    @TestMetadata("javaClassMemberInner_before_Main.kt")
                    public void testJavaClassMemberInner() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMemberInner_before_Main.kt");
                        doTestWithExtraFile(fileName);
                    }

                    @TestMetadata("javaClassMemberInnerPartialSubstitution_before_Main.kt")
                    public void testJavaClassMemberInnerPartialSubstitution() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMemberInnerPartialSubstitution_before_Main.kt");
                        doTestWithExtraFile(fileName);
                    }

                    @TestMetadata("javaClassMemberInnerWithReceiverArg_before_Main.kt")
                    public void testJavaClassMemberInnerWithReceiverArg() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMemberInnerWithReceiverArg_before_Main.kt");
                        doTestWithExtraFile(fileName);
                    }

                    @TestMetadata("javaClassMemberPartialSubstitution_before_Main.kt")
                    public void testJavaClassMemberPartialSubstitution() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMemberPartialSubstitution_before_Main.kt");
                        doTestWithExtraFile(fileName);
                    }
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DelegationSpecifier extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInDelegationSpecifier() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
                }

                @TestMetadata("delegatorToNestedJavaSupercall_before_Main.kt")
                public void testDelegatorToNestedJavaSupercall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier/delegatorToNestedJavaSupercall_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("delegatorToNestedJavaSupercallWithParamNames_before_Main.kt")
                public void testDelegatorToNestedJavaSupercallWithParamNames() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier/delegatorToNestedJavaSupercallWithParamNames_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("traitDelegatorToNestedGroovySuperclass_before_Main.kt")
                public void testTraitDelegatorToNestedGroovySuperclass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier/traitDelegatorToNestedGroovySuperclass_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("traitDelegatorToNestedJavaSuperclass_before_Main.kt")
                public void testTraitDelegatorToNestedJavaSuperclass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier/traitDelegatorToNestedJavaSuperclass_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ImportDirective extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInImportDirective() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/importDirective"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
                }

                @TestMetadata("annotationWithJavaQualifier_before_Main.kt")
                public void testAnnotationWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/annotationWithJavaQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("classWithGroovyQualifier_before_Main.kt")
                public void testClassWithGroovyQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/classWithGroovyQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("classWithJavaQualifier_before_Main.kt")
                public void testClassWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/classWithJavaQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumEntryInJavaEnum_before_Main.kt")
                public void testEnumEntryInJavaEnum() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/enumEntryInJavaEnum_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumWithJavaQualifier_before_Main.kt")
                public void testEnumWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/enumWithJavaQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("objectWithJavaQualifier_before_Main.kt")
                public void testObjectWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/objectWithJavaQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("traitWithJavaQualifier_before_Main.kt")
                public void testTraitWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/traitWithJavaQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ReferenceExpression extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInReferenceExpression() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/referenceExpression"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
                }

                @TestMetadata("classByNestedGroovyQualifier_before_Main.kt")
                public void testClassByNestedGroovyQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/classByNestedGroovyQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("classByNestedJavaQualifier_before_Main.kt")
                public void testClassByNestedJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/classByNestedJavaQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumByNestedJavaQualifier_before_Main.kt")
                public void testEnumByNestedJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumByNestedJavaQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumEntryWithJavaEnumQualifier_before_Main.kt")
                public void testEnumEntryWithJavaEnumQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumEntryWithJavaEnumQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumEntryWithJavaEnumSuperclass_before_Main.kt")
                public void testEnumEntryWithJavaEnumSuperclass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumEntryWithJavaEnumSuperclass_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumEntryWithJavaNonEnumQualifier_before_Main.kt")
                public void testEnumEntryWithJavaNonEnumQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumEntryWithJavaNonEnumQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumEntryWithJavaNonEnumSuperclass_before_Main.kt")
                public void testEnumEntryWithJavaNonEnumSuperclass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumEntryWithJavaNonEnumSuperclass_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("objectWithJavaQualifier_before_Main.kt")
                public void testObjectWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/objectWithJavaQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("traitByNestedJavaQualifier_before_Main.kt")
                public void testTraitByNestedJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/traitByNestedJavaQualifier_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TypeReference extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInTypeReference() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/typeReference"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
                }

                @TestMetadata("annotationJavaTypeReceiver_before_Main.kt")
                public void testAnnotationJavaTypeReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference/annotationJavaTypeReceiver_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("classGroovyTypeReceiver_before_Main.kt")
                public void testClassGroovyTypeReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference/classGroovyTypeReceiver_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("classJavaTypeReceiver_before_Main.kt")
                public void testClassJavaTypeReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference/classJavaTypeReceiver_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumEntryJavaEnumReceiver_before_Main.kt")
                public void testEnumEntryJavaEnumReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference/enumEntryJavaEnumReceiver_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumJavaTypeReceiver_before_Main.kt")
                public void testEnumJavaTypeReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference/enumJavaTypeReceiver_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("traitJavaTypeReceiver_before_Main.kt")
                public void testTraitJavaTypeReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference/traitJavaTypeReceiver_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }
        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createFunction")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateFunction extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateFunction() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createFunction"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createFunction/call")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Call extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInCall() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createFunction/call"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
                }

                @TestMetadata("extensionFunOnGroovyType_before_Main.kt")
                public void testExtensionFunOnGroovyType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/extensionFunOnGroovyType_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("extensionFunOnJavaType_before_Main.kt")
                public void testExtensionFunOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/extensionFunOnJavaType_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("funOnGroovyType_before_Main.kt")
                public void testFunOnGroovyType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/funOnGroovyType_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("funOnJavaInterface_before_Main.kt")
                public void testFunOnJavaInterface() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/funOnJavaInterface_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("funOnJavaType_before_Main.kt")
                public void testFunOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/funOnJavaType_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("genericFunOnJavaType_before_Main.kt")
                public void testGenericFunOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/genericFunOnJavaType_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticExtensionFunOnJavaClass_before_Main.kt")
                public void testStaticExtensionFunOnJavaClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/staticExtensionFunOnJavaClass_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticFunOnJavaClass_before_Main.kt")
                public void testStaticFunOnJavaClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/staticFunOnJavaClass_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticFunOnJavaInterface_before_Main.kt")
                public void testStaticFunOnJavaInterface() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/staticFunOnJavaInterface_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class TypeArguments extends AbstractQuickFixMultiFileTest {
                    public void testAllFilesPresentInTypeArguments() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
                    }

                    @TestMetadata("javaClassMember_before_Main.kt")
                    public void testJavaClassMember() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments/javaClassMember_before_Main.kt");
                        doTestWithExtraFile(fileName);
                    }

                    @TestMetadata("javaClassMemberPartialSubstitution_before_Main.kt")
                    public void testJavaClassMemberPartialSubstitution() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments/javaClassMemberPartialSubstitution_before_Main.kt");
                        doTestWithExtraFile(fileName);
                    }

                    @TestMetadata("javaClassMemberWithReceiverArg_before_Main.kt")
                    public void testJavaClassMemberWithReceiverArg() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments/javaClassMemberWithReceiverArg_before_Main.kt");
                        doTestWithExtraFile(fileName);
                    }
                }
            }

        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createSecondaryConstructor")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateSecondaryConstructor extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateSecondaryConstructor() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createSecondaryConstructor"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("delegatorToSuperCallJavaClass_before_Main.kt")
            public void testDelegatorToSuperCallJavaClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createSecondaryConstructor/delegatorToSuperCallJavaClass_before_Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("groovyConstructor_before_Main.kt")
            public void testGroovyConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createSecondaryConstructor/groovyConstructor_before_Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("javaConstructor_before_Main.kt")
            public void testJavaConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createSecondaryConstructor/javaConstructor_before_Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("superCallJavaClass_before_Main.kt")
            public void testSuperCallJavaClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createSecondaryConstructor/superCallJavaClass_before_Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createVariable")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateVariable extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateVariable() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createVariable"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createVariable/parameter")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Parameter extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInParameter() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createVariable/parameter"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
                }

                @TestMetadata("platformType_before_Main.kt")
                public void testPlatformType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/parameter/platformType_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createVariable/property")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Property extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInProperty() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createVariable/property"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
                }

                @TestMetadata("extensionValOnGroovyType_before_Main.kt")
                public void testExtensionValOnGroovyType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/extensionValOnGroovyType_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("extensionValOnJavaType_before_Main.kt")
                public void testExtensionValOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/extensionValOnJavaType_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticExtensionValOnJavaType_before_Main.kt")
                public void testStaticExtensionValOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/staticExtensionValOnJavaType_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticValOnJavaClass_before_Main.kt")
                public void testStaticValOnJavaClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/staticValOnJavaClass_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticValOnJavaInterface_before_Main.kt")
                public void testStaticValOnJavaInterface() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/staticValOnJavaInterface_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticVarOnJavaInterface_before_Main.kt")
                public void testStaticVarOnJavaInterface() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/staticVarOnJavaInterface_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("valOnGroovyType_before_Main.kt")
                public void testValOnGroovyType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/valOnGroovyType_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("valOnJavaInterface_before_Main.kt")
                public void testValOnJavaInterface() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/valOnJavaInterface_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("valOnJavaType_before_Main.kt")
                public void testValOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/valOnJavaType_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("varOnJavaType_before_Main.kt")
                public void testVarOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/varOnJavaType_before_Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/deprecatedSymbolUsage")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DeprecatedSymbolUsage extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInDeprecatedSymbolUsage() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/deprecatedSymbolUsage"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
        }

        @TestMetadata("javaDeprecated_before_Main.kt")
        public void testJavaDeprecated() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/deprecatedSymbolUsage/javaDeprecated_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("toMethodFromCompanionObject_before_Main.kt")
        public void testToMethodFromCompanionObject() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/deprecatedSymbolUsage/toMethodFromCompanionObject_before_Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("idea/testData/quickfix/deprecatedSymbolUsage/imports")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Imports extends AbstractQuickFixMultiFileTest {
            @TestMetadata("addImportFromSamePackage_before_Main.kt")
            public void testAddImportFromSamePackage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/deprecatedSymbolUsage/imports/addImportFromSamePackage_before_Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("addImportFromSamePackage2_before_Main.kt")
            public void testAddImportFromSamePackage2() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/deprecatedSymbolUsage/imports/addImportFromSamePackage2_before_Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("addImportFromSamePackage3_before_Main.kt")
            public void testAddImportFromSamePackage3() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/deprecatedSymbolUsage/imports/addImportFromSamePackage3_before_Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("addImports_before_Main.kt")
            public void testAddImports() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/deprecatedSymbolUsage/imports/addImports_before_Main.kt");
                doTestWithExtraFile(fileName);
            }

            public void testAllFilesPresentInImports() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/deprecatedSymbolUsage/imports"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("rootPackage_before_Main.kt")
            public void testRootPackage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/deprecatedSymbolUsage/imports/rootPackage_before_Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

        @TestMetadata("idea/testData/quickfix/deprecatedSymbolUsage/typeArguments")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TypeArguments extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInTypeArguments() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/deprecatedSymbolUsage/typeArguments"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("platformType_before_Main.kt")
            public void testPlatformType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/deprecatedSymbolUsage/typeArguments/platformType_before_Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

        @TestMetadata("idea/testData/quickfix/deprecatedSymbolUsage/wholeProject")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class WholeProject extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInWholeProject() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/deprecatedSymbolUsage/wholeProject"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("function_before_Main.kt")
            public void testFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/deprecatedSymbolUsage/wholeProject/function_before_Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("property_before_Main.kt")
            public void testProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/deprecatedSymbolUsage/wholeProject/property_before_Main.kt");
                doTestWithExtraFile(fileName);
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/migration")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Migration extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInMigration() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
        }

        @TestMetadata("idea/testData/quickfix/migration/javaAnnotationPositionedArguments")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class JavaAnnotationPositionedArguments extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInJavaAnnotationPositionedArguments() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration/javaAnnotationPositionedArguments"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("basicMultiple_before_Main.kt")
            public void testBasicMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/javaAnnotationPositionedArguments/basicMultiple_before_Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("noValueForArgumentMultiple_before_Main.kt")
            public void testNoValueForArgumentMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/javaAnnotationPositionedArguments/noValueForArgumentMultiple_before_Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("wrongTypeMultiple_before_Main.kt")
            public void testWrongTypeMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/javaAnnotationPositionedArguments/wrongTypeMultiple_before_Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

        @TestMetadata("idea/testData/quickfix/migration/lambdaSyntax")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class LambdaSyntax extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInLambdaSyntax() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration/lambdaSyntax"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("lambdaSyntaxMultiple_before_Main.kt")
            public void testLambdaSyntaxMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/lambdaSyntax/lambdaSyntaxMultiple_before_Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

        @TestMetadata("idea/testData/quickfix/migration/migrateJavaAnnotationMethodCall")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class MigrateJavaAnnotationMethodCall extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInMigrateJavaAnnotationMethodCall() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration/migrateJavaAnnotationMethodCall"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("basicMultiple_before_Main.kt")
            public void testBasicMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/migrateJavaAnnotationMethodCall/basicMultiple_before_Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("wholeFileMultiple_before_Main.kt")
            public void testWholeFileMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/migrateJavaAnnotationMethodCall/wholeFileMultiple_before_Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

        @TestMetadata("idea/testData/quickfix/migration/missingConstructorKeyword")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class MissingConstructorKeyword extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInMissingConstructorKeyword() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration/missingConstructorKeyword"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("manyFilesMuitliple_before_Main.kt")
            public void testManyFilesMuitliple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/missingConstructorKeyword/manyFilesMuitliple_before_Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

        @TestMetadata("idea/testData/quickfix/migration/obsoleteLabelSyntax")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ObsoleteLabelSyntax extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInObsoleteLabelSyntax() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration/obsoleteLabelSyntax"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("manyFilesMuitliple_before_Main.kt")
            public void testManyFilesMuitliple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/obsoleteLabelSyntax/manyFilesMuitliple_before_Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

        @TestMetadata("idea/testData/quickfix/migration/removeNameFromFunctionExpression")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class RemoveNameFromFunctionExpression extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInRemoveNameFromFunctionExpression() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration/removeNameFromFunctionExpression"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("manyFilesMuitliple_before_Main.kt")
            public void testManyFilesMuitliple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/removeNameFromFunctionExpression/manyFilesMuitliple_before_Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

    }

    @TestMetadata("idea/testData/quickfix/modifiers")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Modifiers extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInModifiers() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/modifiers"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
        }

        @TestMetadata("idea/testData/quickfix/modifiers/addOpenToClassDeclaration")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AddOpenToClassDeclaration extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInAddOpenToClassDeclaration() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/modifiers/addOpenToClassDeclaration"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaClass")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class FinalJavaClass extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInFinalJavaClass() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaClass"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
                }

                @TestMetadata("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaClass/javaCode")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class JavaCode extends AbstractQuickFixMultiFileTest {
                    public void testAllFilesPresentInJavaCode() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaClass/javaCode"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
                    }

                }
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/nullables")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Nullables extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInNullables() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/nullables"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
        }

    }

    @TestMetadata("idea/testData/quickfix/override")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Override extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInOverride() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/override"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
        }

        @TestMetadata("idea/testData/quickfix/override/nothingToOverride")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NothingToOverride extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInNothingToOverride() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/override/nothingToOverride"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

            @TestMetadata("import_before_Main.kt")
            public void testImport() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/override/nothingToOverride/import_before_Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("twoPackages_before_Main.kt")
            public void testTwoPackages() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/override/nothingToOverride/twoPackages_before_Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

    }

    @TestMetadata("idea/testData/quickfix/suppress")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Suppress extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInSuppress() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/suppress"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
        }

        @TestMetadata("idea/testData/quickfix/suppress/forStatement")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForStatement extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInForStatement() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/suppress/forStatement"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
            }

        }
    }

    @TestMetadata("idea/testData/quickfix/typeImports")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TypeImports extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInTypeImports() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/typeImports"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
        }

        @TestMetadata("importFromAnotherFile_before_Main.kt")
        public void testImportFromAnotherFile() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/typeImports/importFromAnotherFile_before_Main.kt");
            doTestWithExtraFile(fileName);
        }
    }

    @TestMetadata("idea/testData/quickfix/typeMismatch")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TypeMismatch extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInTypeMismatch() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/typeMismatch"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
        }

    }

    @TestMetadata("idea/testData/quickfix/variables")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Variables extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInVariables() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/variables"), Pattern.compile("^(\\w+)_before_Main\\.kt$"), true);
        }

    }

}
